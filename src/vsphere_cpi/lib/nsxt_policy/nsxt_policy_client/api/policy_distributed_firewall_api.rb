=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module NSXTPolicyClient
  class PolicyDistributedFirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete CommunicationEntry
    # Delete CommunicationEntry This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_entry(domain_id, communication_map_id, communication_entry_id, opts = {})
      delete_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts)
      nil
    end

    # Delete CommunicationEntry
    # Delete CommunicationEntry This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.delete_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.delete_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyDistributedFirewallApi.delete_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#delete_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a communication map from this domain
    # Deletes the communication map along with all the communication entries This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_communication_map_for_domain(domain_id, communication_map_id, opts = {})
      delete_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts)
      nil
    end

    # Deletes a communication map from this domain
    # Deletes the communication map along with all the communication entries This API is deprecated. Please use the following API instead. DELETE /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.delete_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.delete_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.delete_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#delete_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won't get deleted. 
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere  (default to false)
    # @return [nil]
    def delete_policy_context_profile(context_profile_id, opts = {})
      delete_policy_context_profile_with_http_info(context_profile_id, opts)
      nil
    end

    # Delete Policy Context Profile
    # Deletes the specified Policy Context Profile. If the Policy Context Profile is consumed in a firewall rule, it won&#39;t get deleted. 
    # @param context_profile_id Policy Context Profile Id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force Force delete the resource even if it is being used somewhere 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_context_profile_with_http_info(context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.delete_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling PolicyDistributedFirewallApi.delete_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#delete_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      nil
    end

    # Deletes a security policy from this domain
    # Deletes the security policy along with all the rules 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.delete_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.delete_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.delete_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#delete_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      nil
    end

    # Delete rule
    # Delete rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.delete_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.delete_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.delete_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyDistributedFirewallApi.delete_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#delete_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyContextProfile]
    def get_policy_context_profile(context_profile_id, opts = {})
      data, _status_code, _headers = get_policy_context_profile_with_http_info(context_profile_id, opts)
      data
    end

    # Get PolicyContextProfile
    # Get a single PolicyContextProfile by id 
    # @param context_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def get_policy_context_profile_with_http_info(context_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.get_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling PolicyDistributedFirewallApi.get_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#get_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List CommunicationEntries
    # List CommunicationEntries This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationEntryListResult]
    def list_communication_entry(domain_id, communication_map_id, opts = {})
      data, _status_code, _headers = list_communication_entry_with_http_info(domain_id, communication_map_id, opts)
      data
    end

    # List CommunicationEntries
    # List CommunicationEntries This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationEntryListResult, Fixnum, Hash)>] CommunicationEntryListResult data, response status code and response headers
    def list_communication_entry_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.list_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.list_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.list_communication_entry"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_communication_entry, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_communication_entry, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#list_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List communication maps
    # List all communication maps for a domain. This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [CommunicationMapListResult]
    def list_communication_maps_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_communication_maps_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List communication maps
    # List all communication maps for a domain. This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(CommunicationMapListResult, Fixnum, Hash)>] CommunicationMapListResult data, response status code and response headers
    def list_communication_maps_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.list_communication_maps_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.list_communication_maps_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_communication_maps_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_communication_maps_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMapListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#list_communication_maps_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def list_policy_context_profiles(opts = {})
      data, _status_code, _headers = list_policy_context_profiles_with_http_info(opts)
      data
    end

    # Get PolicyContextProfiles
    # Get all PolicyContextProfiles 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def list_policy_context_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.list_policy_context_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_policy_context_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_policy_context_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/context-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#list_policy_context_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyContextProfileListResult]
    def list_profile_supported_attributes(opts = {})
      data, _status_code, _headers = list_profile_supported_attributes_with_http_info(opts)
      data
    end

    # List Policy Context Profile supported attributes and sub-attributes
    # Returns supported attribute and sub-attributes for specified attribute key with their supported values, if provided in query/request parameter, else will fetch all supported attributes and sub-attributes for all supported attribute keys. Alternatively, to get a list of supported attributes and sub-attributes fire the following REST API GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_key Fetch attributes and sub-attributes for the given attribute key
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyContextProfileListResult, Fixnum, Hash)>] PolicyContextProfileListResult data, response status code and response headers
    def list_profile_supported_attributes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.list_profile_supported_attributes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_profile_supported_attributes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_profile_supported_attributes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/context-profiles/attributes'

      # query parameters
      query_params = {}
      query_params[:'attribute_key'] = opts[:'attribute_key'] if !opts[:'attribute_key'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#list_profile_supported_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [SecurityPolicyListResult]
    def list_security_policies_for_domain(domain_id, opts = {})
      data, _status_code, _headers = list_security_policies_for_domain_with_http_info(domain_id, opts)
      data
    end

    # List security policies
    # List all security policies for a domain. 
    # @param domain_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(SecurityPolicyListResult, Fixnum, Hash)>] SecurityPolicyListResult data, response status code and response headers
    def list_security_policies_for_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.list_security_policies_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.list_security_policies_for_domain"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_security_policies_for_domain, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_security_policies_for_domain, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies'.sub('{' + 'domain-id' + '}', domain_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicyListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#list_security_policies_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [RuleListResult]
    def list_security_rules(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = list_security_rules_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # List rules
    # List rules
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(RuleListResult, Fixnum, Hash)>] RuleListResult data, response status code and response headers
    def list_security_rules_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.list_security_rules ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.list_security_rules"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.list_security_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_security_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDistributedFirewallApi.list_security_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#list_security_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a CommunicationEntry
    # Patch the CommunicationEntry. If a communication entry for the given communication-entry-id is not present, the object will get created and if it is present it will be updated. This is a full replace  This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      patch_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      nil
    end

    # Patch a CommunicationEntry
    # Patch the CommunicationEntry. If a communication entry for the given communication-entry-id is not present, the object will get created and if it is present it will be updated. This is a full replace  This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.patch_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyDistributedFirewallApi.patch_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling PolicyDistributedFirewallApi.patch_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#patch_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch communication map
    # Patch the communication map for a domain. If a communication map for the given communication-map-id is not present, the object will get created and if it is present it will be updated. This is a full replace This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_communication_map_for_domain(domain_id, communication_map_id, communication_map, opts = {})
      patch_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts)
      nil
    end

    # Patch communication map
    # Patch the communication map for a domain. If a communication map for the given communication-map-id is not present, the object will get created and if it is present it will be updated. This is a full replace This API is deprecated. Please use the following API instead. PATCH /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.patch_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.patch_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.patch_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling PolicyDistributedFirewallApi.patch_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#patch_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_create_or_update_policy_context_profile(context_profile_id, policy_context_profile, opts = {})
      patch_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts)
      nil
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.patch_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling PolicyDistributedFirewallApi.patch_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling PolicyDistributedFirewallApi.patch_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#patch_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      nil
    end

    # Patch security policy
    # Patch the security policy for a domain. If a security policy for the given security-policy-id is not present, the object will get created and if it is present it will be updated. This is a full replace 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.patch_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.patch_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling PolicyDistributedFirewallApi.patch_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#patch_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      nil
    end

    # Patch a rule
    # Patch the rule. If Rule corresponding to the the given rule-id is not present, the object will get created and if it is present it will be updated. This is a full replace 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.patch_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.patch_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.patch_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyDistributedFirewallApi.patch_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling PolicyDistributedFirewallApi.patch_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#patch_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can't have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @return [PolicyContextProfile]
    def put_create_or_update_policy_context_profile(context_profile_id, policy_context_profile, opts = {})
      data, _status_code, _headers = put_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts)
      data
    end

    # Create PolicyContextProfile
    # Creates/Updates a PolicyContextProfile, which encapsulates attribute and sub-attributes of network services. Rules for using attributes and sub-attributes in single PolicyContextProfile 1. One type of attribute can&#39;t have multiple occurrences. ( Eg. -    Attribute type APP_ID can be used only once per PolicyContextProfile.) 2. For specifying multiple values for an attribute, provide them in an array. 3. If sub-attribtes are mentioned for an attribute, then only single    value is allowed for that attribute. 4. To get a list of supported attributes and sub-attributes fire the following REST API    GET https://&amp;lt;policy-mgr&amp;gt;/policy/api/v1/infra/context-profiles/attributes 
    # @param context_profile_id 
    # @param policy_context_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyContextProfile, Fixnum, Hash)>] PolicyContextProfile data, response status code and response headers
    def put_create_or_update_policy_context_profile_with_http_info(context_profile_id, policy_context_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.put_create_or_update_policy_context_profile ...'
      end
      # verify the required parameter 'context_profile_id' is set
      if @api_client.config.client_side_validation && context_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'context_profile_id' when calling PolicyDistributedFirewallApi.put_create_or_update_policy_context_profile"
      end
      # verify the required parameter 'policy_context_profile' is set
      if @api_client.config.client_side_validation && policy_context_profile.nil?
        fail ArgumentError, "Missing the required parameter 'policy_context_profile' when calling PolicyDistributedFirewallApi.put_create_or_update_policy_context_profile"
      end
      # resource path
      local_var_path = '/infra/context-profiles/{context-profile-id}'.sub('{' + 'context-profile-id' + '}', context_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_context_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyContextProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#put_create_or_update_policy_context_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read CommunicationEntry
    # Read CommunicationEntry This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def read_communication_entry(domain_id, communication_map_id, communication_entry_id, opts = {})
      data, _status_code, _headers = read_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts)
      data
    end

    # Read CommunicationEntry
    # Read CommunicationEntry This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def read_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.read_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.read_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.read_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyDistributedFirewallApi.read_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#read_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read communication-map
    # Read communication-map for a domain. This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def read_communication_map_for_domain(domain_id, communication_map_id, opts = {})
      data, _status_code, _headers = read_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts)
      data
    end

    # Read communication-map
    # Read communication-map for a domain. This API is deprecated. Please use the following API instead. GET /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def read_communication_map_for_domain_with_http_info(domain_id, communication_map_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.read_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.read_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.read_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#read_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def read_security_policy_for_domain(domain_id, security_policy_id, opts = {})
      data, _status_code, _headers = read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts)
      data
    end

    # Read security policy
    # Read security policy for a domain. 
    # @param domain_id 
    # @param security_policy_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def read_security_policy_for_domain_with_http_info(domain_id, security_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.read_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.read_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.read_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#read_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def read_security_rule(domain_id, security_policy_id, rule_id, opts = {})
      data, _status_code, _headers = read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts)
      data
    end

    # Read rule
    # Read rule
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def read_security_rule_with_http_info(domain_id, security_policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.read_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.read_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.read_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyDistributedFirewallApi.read_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#read_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of communication entry
    # This is used to re-order a communictation entry within a communication map. This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id?action=revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [CommunicationEntry]
    def revise_communication_entry_revise(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      data, _status_code, _headers = revise_communication_entry_revise_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      data
    end

    # Revise the positioning of communication entry
    # This is used to re-order a communictation entry within a communication map. This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id/rules/rule-id?action&#x3D;revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def revise_communication_entry_revise_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.revise_communication_entry_revise ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.revise_communication_entry_revise"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.revise_communication_entry_revise"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyDistributedFirewallApi.revise_communication_entry_revise"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling PolicyDistributedFirewallApi.revise_communication_entry_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#revise_communication_entry_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of communication maps
    # This is used to set a precedence of a communication map w.r.t others. This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id?action=revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [CommunicationMap]
    def revise_communication_maps_revise(domain_id, communication_map_id, communication_map, opts = {})
      data, _status_code, _headers = revise_communication_maps_revise_with_http_info(domain_id, communication_map_id, communication_map, opts)
      data
    end

    # Revise the positioning of communication maps
    # This is used to set a precedence of a communication map w.r.t others. This API is deprecated. Please use the following API instead. POST /infra/domains/domain-id/security-policies/security-policy-id?action&#x3D;revise 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The communication map/communication entry path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def revise_communication_maps_revise_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.revise_communication_maps_revise ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.revise_communication_maps_revise"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.revise_communication_maps_revise"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling PolicyDistributedFirewallApi.revise_communication_maps_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#revise_communication_maps_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [SecurityPolicy]
    def revise_security_policies_revise(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = revise_security_policies_revise_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Revise the positioning of security policies
    # This is used to set a precedence of a security policy w.r.t others. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def revise_security_policies_revise_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.revise_security_policies_revise ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.revise_security_policies_revise"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.revise_security_policies_revise"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling PolicyDistributedFirewallApi.revise_security_policies_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#revise_security_policies_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation (default to insert_top)
    # @return [Rule]
    def revise_security_rule_revise(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = revise_security_rule_revise_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Revise the positioning of rule
    # This is used to re-order a rule within a security policy. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :anchor_path The security policy/rule path if operation is &#39;insert_after&#39; or &#39;insert_before&#39; 
    # @option opts [String] :operation Operation
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def revise_security_rule_revise_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.revise_security_rule_revise ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.revise_security_rule_revise"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.revise_security_rule_revise"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyDistributedFirewallApi.revise_security_rule_revise"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling PolicyDistributedFirewallApi.revise_security_rule_revise"
      end
      if @api_client.config.client_side_validation && opts[:'operation'] && !['insert_top', 'insert_bottom', 'insert_after', 'insert_before'].include?(opts[:'operation'])
        fail ArgumentError, 'invalid value for "operation", must be one of insert_top, insert_bottom, insert_after, insert_before'
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}?action=revise'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'anchor_path'] = opts[:'anchor_path'] if !opts[:'anchor_path'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#revise_security_rule_revise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API. This API is deprecated. Please use the following API instead PUT /infra/domains/domain-id/security-policies/securit-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationEntry]
    def update_communication_entry(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      data, _status_code, _headers = update_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts)
      data
    end

    # Create or update a CommunicationEntry
    # Update the CommunicationEntry. If a CommunicationEntry with the communication-entry-id is not already present, this API fails with a 404. Creation of CommunicationEntries is not allowed using this API. This API is deprecated. Please use the following API instead PUT /infra/domains/domain-id/security-policies/securit-policy-id/rules/rule-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_entry_id 
    # @param communication_entry 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationEntry, Fixnum, Hash)>] CommunicationEntry data, response status code and response headers
    def update_communication_entry_with_http_info(domain_id, communication_map_id, communication_entry_id, communication_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.update_communication_entry ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.update_communication_entry"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry_id' is set
      if @api_client.config.client_side_validation && communication_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry_id' when calling PolicyDistributedFirewallApi.update_communication_entry"
      end
      # verify the required parameter 'communication_entry' is set
      if @api_client.config.client_side_validation && communication_entry.nil?
        fail ArgumentError, "Missing the required parameter 'communication_entry' when calling PolicyDistributedFirewallApi.update_communication_entry"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}/communication-entries/{communication-entry-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s).sub('{' + 'communication-entry-id' + '}', communication_entry_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_entry)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#update_communication_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update communication map
    # Create or Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced. This API is deprecated. Please use the following API instead. PUT /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [CommunicationMap]
    def update_communication_map_for_domain(domain_id, communication_map_id, communication_map, opts = {})
      data, _status_code, _headers = update_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts)
      data
    end

    # Create or Update communication map
    # Create or Update the communication map for a domain. This is a full replace. All the CommunicationEntries are replaced. This API is deprecated. Please use the following API instead. PUT /infra/domains/domain-id/security-policies/security-policy-id 
    # @param domain_id 
    # @param communication_map_id 
    # @param communication_map 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunicationMap, Fixnum, Hash)>] CommunicationMap data, response status code and response headers
    def update_communication_map_for_domain_with_http_info(domain_id, communication_map_id, communication_map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.update_communication_map_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map_id' is set
      if @api_client.config.client_side_validation && communication_map_id.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map_id' when calling PolicyDistributedFirewallApi.update_communication_map_for_domain"
      end
      # verify the required parameter 'communication_map' is set
      if @api_client.config.client_side_validation && communication_map.nil?
        fail ArgumentError, "Missing the required parameter 'communication_map' when calling PolicyDistributedFirewallApi.update_communication_map_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/communication-maps/{communication-map-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'communication-map-id' + '}', communication_map_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(communication_map)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommunicationMap')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#update_communication_map_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [SecurityPolicy]
    def update_security_policy_for_domain(domain_id, security_policy_id, security_policy, opts = {})
      data, _status_code, _headers = update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts)
      data
    end

    # Create or Update security policy
    # Create or Update the security policy for a domain. This is a full replace. All the rules are replaced. 
    # @param domain_id 
    # @param security_policy_id 
    # @param security_policy 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPolicy, Fixnum, Hash)>] SecurityPolicy data, response status code and response headers
    def update_security_policy_for_domain_with_http_info(domain_id, security_policy_id, security_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.update_security_policy_for_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.update_security_policy_for_domain"
      end
      # verify the required parameter 'security_policy' is set
      if @api_client.config.client_side_validation && security_policy.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy' when calling PolicyDistributedFirewallApi.update_security_policy_for_domain"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(security_policy)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecurityPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#update_security_policy_for_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def update_security_rule(domain_id, security_policy_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts)
      data
    end

    # Create or update a rule
    # Update the rule. Create new rule if a rule with the rule-id is not already present. 
    # @param domain_id 
    # @param security_policy_id 
    # @param rule_id 
    # @param rule 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def update_security_rule_with_http_info(domain_id, security_policy_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDistributedFirewallApi.update_security_rule ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling PolicyDistributedFirewallApi.update_security_rule"
      end
      # verify the required parameter 'security_policy_id' is set
      if @api_client.config.client_side_validation && security_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_policy_id' when calling PolicyDistributedFirewallApi.update_security_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyDistributedFirewallApi.update_security_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling PolicyDistributedFirewallApi.update_security_rule"
      end
      # resource path
      local_var_path = '/infra/domains/{domain-id}/security-policies/{security-policy-id}/rules/{rule-id}'.sub('{' + 'domain-id' + '}', domain_id.to_s).sub('{' + 'security-policy-id' + '}', security_policy_id.to_s).sub('{' + 'rule-id' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rule)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDistributedFirewallApi#update_security_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
