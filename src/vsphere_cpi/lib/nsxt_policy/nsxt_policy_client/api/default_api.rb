=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module NSXTPolicyClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read load balancer node usage summary
    # The API is used to retrieve the load balancer node usage summary of all nodes for every enforcement point. - If the parameter ?include_usages=true exists, the property node_usages are included in response. By default, the property node_usages is not included in response. - If parameter ?enforcement_point_path=<enforcement-point-path> exists, only node usage summary from specific enforcement point is included in response. If no enforcement point path is specified, information will be aggregated from each enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path enforcement point path
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [AggregateLBNodeUsageSummary]
    def get_lb_node_usage_summary(opts = {})
      data, _status_code, _headers = get_lb_node_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer node usage summary
    # The API is used to retrieve the load balancer node usage summary of all nodes for every enforcement point. - If the parameter ?include_usages&#x3D;true exists, the property node_usages are included in response. By default, the property node_usages is not included in response. - If parameter ?enforcement_point_path&#x3D;&lt;enforcement-point-path&gt; exists, only node usage summary from specific enforcement point is included in response. If no enforcement point path is specified, information will be aggregated from each enforcement point. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path enforcement point path
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [Array<(AggregateLBNodeUsageSummary, Fixnum, Hash)>] AggregateLBNodeUsageSummary data, response status code and response headers
    def get_lb_node_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_lb_node_usage_summary ...'
      end
      # resource path
      local_var_path = '/infra/lb-node-usage-summary'

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBNodeUsageSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_lb_node_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read load balancer service usage summary
    # API is used to retrieve the load balancer usage summary for all load balancer services. If the parameter ?include_usages=true exists, the property service-usages is included in the response. By default, service-usages is not included in the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [LBServiceUsageSummary]
    def get_lb_service_usage_summary(opts = {})
      data, _status_code, _headers = get_lb_service_usage_summary_with_http_info(opts)
      data
    end

    # Read load balancer service usage summary
    # API is used to retrieve the load balancer usage summary for all load balancer services. If the parameter ?include_usages&#x3D;true exists, the property service-usages is included in the response. By default, service-usages is not included in the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_usages Whether to include usages
    # @return [Array<(LBServiceUsageSummary, Fixnum, Hash)>] LBServiceUsageSummary data, response status code and response headers
    def get_lb_service_usage_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_lb_service_usage_summary ...'
      end
      # resource path
      local_var_path = '/infra/lb-service-usage-summary'

      # query parameters
      query_params = {}
      query_params[:'include_usages'] = opts[:'include_usages'] if !opts[:'include_usages'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBServiceUsageSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_lb_service_usage_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the compliance status
    # Returns the compliance status and details of non compliant configuration
    # @param [Hash] opts the optional parameters
    # @return [PolicyComplianceStatus]
    def get_policy_compliance_status(opts = {})
      data, _status_code, _headers = get_policy_compliance_status_with_http_info(opts)
      data
    end

    # Returns the compliance status
    # Returns the compliance status and details of non compliant configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyComplianceStatus, Fixnum, Hash)>] PolicyComplianceStatus data, response status code and response headers
    def get_policy_compliance_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_policy_compliance_status ...'
      end
      # resource path
      local_var_path = '/compliance/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyComplianceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_policy_compliance_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
