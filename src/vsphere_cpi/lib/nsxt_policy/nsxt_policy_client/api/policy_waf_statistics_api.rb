=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module NSXTPolicyClient
  class PolicyWafStatisticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Clear Web Application Firewall (WAF) statisitcs
    # Clear all Web Application Firewall (WAF) statistics of the given load balancer service, virtual server and WAF profile. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [nil]
    def clear_waf_statistics_clear_waf_stats(lb_service_id, lb_virtual_server_id, opts = {})
      clear_waf_statistics_clear_waf_stats_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      nil
    end

    # Clear Web Application Firewall (WAF) statisitcs
    # Clear all Web Application Firewall (WAF) statistics of the given load balancer service, virtual server and WAF profile. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clear_waf_statistics_clear_waf_stats_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafStatisticsApi.clear_waf_statistics_clear_waf_stats ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyWafStatisticsApi.clear_waf_statistics_clear_waf_stats"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyWafStatisticsApi.clear_waf_statistics_clear_waf_stats"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/waf-statistics?action=clear_waf_stats'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafStatisticsApi#clear_waf_statistics_clear_waf_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Web Application Firewall (WAF) statistics
    # Returns the WAF statistics of the given load balancer service and virtual server. Currently, only realtime mode is supported. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [WAFStatistics]
    def get_waf_statistics(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_waf_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get the Web Application Firewall (WAF) statistics
    # Returns the WAF statistics of the given load balancer service and virtual server. Currently, only realtime mode is supported. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(WAFStatistics, Fixnum, Hash)>] WAFStatistics data, response status code and response headers
    def get_waf_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafStatisticsApi.get_waf_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyWafStatisticsApi.get_waf_statistics"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyWafStatisticsApi.get_waf_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/waf-statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafStatisticsApi#get_waf_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the Web Application Firewall (WAF) rule statistics
    # Returns the WAF rule statistics of the given category and load balancer service and virtual server. Currently, only realtime mode is supported. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_name Category name
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [WAFRuleStatisticsListResult]
    def list_waf_rule_statistics(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = list_waf_rule_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get the Web Application Firewall (WAF) rule statistics
    # Returns the WAF rule statistics of the given category and load balancer service and virtual server. Currently, only realtime mode is supported. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_name Category name
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(WAFRuleStatisticsListResult, Fixnum, Hash)>] WAFRuleStatisticsListResult data, response status code and response headers
    def list_waf_rule_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafStatisticsApi.list_waf_rule_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyWafStatisticsApi.list_waf_rule_statistics"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyWafStatisticsApi.list_waf_rule_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/waf-rule-statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'category_name'] = opts[:'category_name'] if !opts[:'category_name'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFRuleStatisticsListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafStatisticsApi#list_waf_rule_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all transaction logs for the given virtual server
    # List transaction logs for the given load balancer service, virtual server and WAF profile 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Specifies the action type of the transaction log
    # @option opts [String] :client_ip Specifies the client IP of the transaction log
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_details Flag to indicate whether to include log details (default to false)
    # @option opts [String] :query_string Query string to filter list results
    # @option opts [String] :source Data source type.
    # @option opts [String] :url Specifies the request URL of the transaction log
    # @return [WAFTransactionLogListResult]
    def list_waf_transaction_logs(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = list_waf_transaction_logs_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # List all transaction logs for the given virtual server
    # List transaction logs for the given load balancer service, virtual server and WAF profile 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Specifies the action type of the transaction log
    # @option opts [String] :client_ip Specifies the client IP of the transaction log
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [BOOLEAN] :include_details Flag to indicate whether to include log details
    # @option opts [String] :query_string Query string to filter list results
    # @option opts [String] :source Data source type.
    # @option opts [String] :url Specifies the request URL of the transaction log
    # @return [Array<(WAFTransactionLogListResult, Fixnum, Hash)>] WAFTransactionLogListResult data, response status code and response headers
    def list_waf_transaction_logs_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafStatisticsApi.list_waf_transaction_logs ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyWafStatisticsApi.list_waf_transaction_logs"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyWafStatisticsApi.list_waf_transaction_logs"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['DENIED', 'ALLOWED', 'DETECTED'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of DENIED, ALLOWED, DETECTED'
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/waf-transaction-logs'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'client_ip'] = opts[:'client_ip'] if !opts[:'client_ip'].nil?
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'include_details'] = opts[:'include_details'] if !opts[:'include_details'].nil?
      query_params[:'query_string'] = opts[:'query_string'] if !opts[:'query_string'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFTransactionLogListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafStatisticsApi#list_waf_transaction_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a transaction logs for the given transaction ID
    # Retrieve a transaction log for the given transaction ID. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param waf_transaction_log_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [WAFTransactionLog]
    def read_waf_transaction_log(lb_service_id, lb_virtual_server_id, waf_transaction_log_id, opts = {})
      data, _status_code, _headers = read_waf_transaction_log_with_http_info(lb_service_id, lb_virtual_server_id, waf_transaction_log_id, opts)
      data
    end

    # Retrieve a transaction logs for the given transaction ID
    # Retrieve a transaction log for the given transaction ID. 
    # @param lb_service_id 
    # @param lb_virtual_server_id 
    # @param waf_transaction_log_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(WAFTransactionLog, Fixnum, Hash)>] WAFTransactionLog data, response status code and response headers
    def read_waf_transaction_log_with_http_info(lb_service_id, lb_virtual_server_id, waf_transaction_log_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafStatisticsApi.read_waf_transaction_log ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyWafStatisticsApi.read_waf_transaction_log"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyWafStatisticsApi.read_waf_transaction_log"
      end
      # verify the required parameter 'waf_transaction_log_id' is set
      if @api_client.config.client_side_validation && waf_transaction_log_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_transaction_log_id' when calling PolicyWafStatisticsApi.read_waf_transaction_log"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/waf-transaction-logs/{waf-transaction-log-id}'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s).sub('{' + 'waf-transaction-log-id' + '}', waf_transaction_log_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFTransactionLog')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafStatisticsApi#read_waf_transaction_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
