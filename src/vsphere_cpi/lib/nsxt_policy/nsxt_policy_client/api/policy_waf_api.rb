=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module NSXTPolicyClient
  class PolicyWafApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a WAF profile
    # Delete a WAF profile. You must unbind the WAF profile from load balancer before delete it. 
    # @param waf_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_waf_profile(waf_profile_id, opts = {})
      delete_waf_profile_with_http_info(waf_profile_id, opts)
      nil
    end

    # Delete a WAF profile
    # Delete a WAF profile. You must unbind the WAF profile from load balancer before delete it. 
    # @param waf_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_waf_profile_with_http_info(waf_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.delete_waf_profile ...'
      end
      # verify the required parameter 'waf_profile_id' is set
      if @api_client.config.client_side_validation && waf_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_profile_id' when calling PolicyWafApi.delete_waf_profile"
      end
      # resource path
      local_var_path = '/infra/waf-profiles/{waf-profile-id}'.sub('{' + 'waf-profile-id' + '}', waf_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#delete_waf_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a WAF rule set
    # Delete WAF ruleset. 
    # @param waf_rule_set_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_waf_ruleset(waf_rule_set_id, opts = {})
      delete_waf_ruleset_with_http_info(waf_rule_set_id, opts)
      nil
    end

    # Delete a WAF rule set
    # Delete WAF ruleset. 
    # @param waf_rule_set_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_waf_ruleset_with_http_info(waf_rule_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.delete_waf_ruleset ...'
      end
      # verify the required parameter 'waf_rule_set_id' is set
      if @api_client.config.client_side_validation && waf_rule_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_set_id' when calling PolicyWafApi.delete_waf_ruleset"
      end
      # resource path
      local_var_path = '/infra/waf-rule-sets/{waf-rule-set-id}'.sub('{' + 'waf-rule-set-id' + '}', waf_rule_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#delete_waf_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get WAF category
    # Get WAF category 
    # @param waf_rule_set_id 
    # @param waf_category_id 
    # @param [Hash] opts the optional parameters
    # @return [WAFCategory]
    def get_waf_category(waf_rule_set_id, waf_category_id, opts = {})
      data, _status_code, _headers = get_waf_category_with_http_info(waf_rule_set_id, waf_category_id, opts)
      data
    end

    # Get WAF category
    # Get WAF category 
    # @param waf_rule_set_id 
    # @param waf_category_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WAFCategory, Fixnum, Hash)>] WAFCategory data, response status code and response headers
    def get_waf_category_with_http_info(waf_rule_set_id, waf_category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.get_waf_category ...'
      end
      # verify the required parameter 'waf_rule_set_id' is set
      if @api_client.config.client_side_validation && waf_rule_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_set_id' when calling PolicyWafApi.get_waf_category"
      end
      # verify the required parameter 'waf_category_id' is set
      if @api_client.config.client_side_validation && waf_category_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_category_id' when calling PolicyWafApi.get_waf_category"
      end
      # resource path
      local_var_path = '/infra/waf-rule-sets/{waf-rule-set-id}/categories/{waf-category-id}'.sub('{' + 'waf-rule-set-id' + '}', waf_rule_set_id.to_s).sub('{' + 'waf-category-id' + '}', waf_category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#get_waf_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get WAF global config
    # Get WAF global config 
    # @param [Hash] opts the optional parameters
    # @return [WAFGlobalConfig]
    def get_waf_global_config(opts = {})
      data, _status_code, _headers = get_waf_global_config_with_http_info(opts)
      data
    end

    # Get WAF global config
    # Get WAF global config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WAFGlobalConfig, Fixnum, Hash)>] WAFGlobalConfig data, response status code and response headers
    def get_waf_global_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.get_waf_global_config ...'
      end
      # resource path
      local_var_path = '/infra/waf-global-config/default'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFGlobalConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#get_waf_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a WAF profile
    # Get a WAF profiles. 
    # @param waf_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [WAFProfile]
    def get_waf_profile(waf_profile_id, opts = {})
      data, _status_code, _headers = get_waf_profile_with_http_info(waf_profile_id, opts)
      data
    end

    # Get a WAF profile
    # Get a WAF profiles. 
    # @param waf_profile_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WAFProfile, Fixnum, Hash)>] WAFProfile data, response status code and response headers
    def get_waf_profile_with_http_info(waf_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.get_waf_profile ...'
      end
      # verify the required parameter 'waf_profile_id' is set
      if @api_client.config.client_side_validation && waf_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_profile_id' when calling PolicyWafApi.get_waf_profile"
      end
      # resource path
      local_var_path = '/infra/waf-profiles/{waf-profile-id}'.sub('{' + 'waf-profile-id' + '}', waf_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#get_waf_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a WAF rule
    # Get a WAF rule. 
    # @param waf_rule_set_id 
    # @param waf_category_id 
    # @param waf_rule_id 
    # @param [Hash] opts the optional parameters
    # @return [WAFRule]
    def get_waf_rule(waf_rule_set_id, waf_category_id, waf_rule_id, opts = {})
      data, _status_code, _headers = get_waf_rule_with_http_info(waf_rule_set_id, waf_category_id, waf_rule_id, opts)
      data
    end

    # Get a WAF rule
    # Get a WAF rule. 
    # @param waf_rule_set_id 
    # @param waf_category_id 
    # @param waf_rule_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WAFRule, Fixnum, Hash)>] WAFRule data, response status code and response headers
    def get_waf_rule_with_http_info(waf_rule_set_id, waf_category_id, waf_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.get_waf_rule ...'
      end
      # verify the required parameter 'waf_rule_set_id' is set
      if @api_client.config.client_side_validation && waf_rule_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_set_id' when calling PolicyWafApi.get_waf_rule"
      end
      # verify the required parameter 'waf_category_id' is set
      if @api_client.config.client_side_validation && waf_category_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_category_id' when calling PolicyWafApi.get_waf_rule"
      end
      # verify the required parameter 'waf_rule_id' is set
      if @api_client.config.client_side_validation && waf_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_id' when calling PolicyWafApi.get_waf_rule"
      end
      # resource path
      local_var_path = '/infra/waf-rule-sets/{waf-rule-set-id}/categories/{waf-category-id}/rules/{waf-rule-id}'.sub('{' + 'waf-rule-set-id' + '}', waf_rule_set_id.to_s).sub('{' + 'waf-category-id' + '}', waf_category_id.to_s).sub('{' + 'waf-rule-id' + '}', waf_rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#get_waf_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get WAF ruleset
    # Get WAF ruleset 
    # @param waf_rule_set_id 
    # @param [Hash] opts the optional parameters
    # @return [WAFRuleset]
    def get_waf_rule_set(waf_rule_set_id, opts = {})
      data, _status_code, _headers = get_waf_rule_set_with_http_info(waf_rule_set_id, opts)
      data
    end

    # Get WAF ruleset
    # Get WAF ruleset 
    # @param waf_rule_set_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WAFRuleset, Fixnum, Hash)>] WAFRuleset data, response status code and response headers
    def get_waf_rule_set_with_http_info(waf_rule_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.get_waf_rule_set ...'
      end
      # verify the required parameter 'waf_rule_set_id' is set
      if @api_client.config.client_side_validation && waf_rule_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_set_id' when calling PolicyWafApi.get_waf_rule_set"
      end
      # resource path
      local_var_path = '/infra/waf-rule-sets/{waf-rule-set-id}'.sub('{' + 'waf-rule-set-id' + '}', waf_rule_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFRuleset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#get_waf_rule_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of WAF RuleSets
    # Paginated list of WAF RuleSets containing core rule sets and enhanced rule set (if enabled). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type WAF ruleset type
    # @return [WAFRulesetListResult]
    def list_policy_waf_rulesets(opts = {})
      data, _status_code, _headers = list_policy_waf_rulesets_with_http_info(opts)
      data
    end

    # List of WAF RuleSets
    # Paginated list of WAF RuleSets containing core rule sets and enhanced rule set (if enabled). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @option opts [String] :type WAF ruleset type
    # @return [Array<(WAFRulesetListResult, Fixnum, Hash)>] WAFRulesetListResult data, response status code and response headers
    def list_policy_waf_rulesets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.list_policy_waf_rulesets ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_policy_waf_rulesets, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_policy_waf_rulesets, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['WAFCrs', 'WAFErs'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of WAFCrs, WAFErs'
      end
      # resource path
      local_var_path = '/infra/waf-rule-sets'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFRulesetListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#list_policy_waf_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of WAF categories
    # Get a paginated list of WAF categories. 
    # @param waf_rule_set_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_group Group name of the category
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [WAFCategoryListResult]
    def list_waf_categories(waf_rule_set_id, opts = {})
      data, _status_code, _headers = list_waf_categories_with_http_info(waf_rule_set_id, opts)
      data
    end

    # Get a paginated list of WAF categories
    # Get a paginated list of WAF categories. 
    # @param waf_rule_set_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_group Group name of the category
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(WAFCategoryListResult, Fixnum, Hash)>] WAFCategoryListResult data, response status code and response headers
    def list_waf_categories_with_http_info(waf_rule_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.list_waf_categories ...'
      end
      # verify the required parameter 'waf_rule_set_id' is set
      if @api_client.config.client_side_validation && waf_rule_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_set_id' when calling PolicyWafApi.list_waf_categories"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_waf_categories, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_waf_categories, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/waf-rule-sets/{waf-rule-set-id}/categories'.sub('{' + 'waf-rule-set-id' + '}', waf_rule_set_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'category_group'] = opts[:'category_group'] if !opts[:'category_group'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFCategoryListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#list_waf_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of WAF profiles
    # Get a paginated list of WAF profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [WAFProfileListResult]
    def list_waf_profiles(opts = {})
      data, _status_code, _headers = list_waf_profiles_with_http_info(opts)
      data
    end

    # Get a paginated list of WAF profiles
    # Get a paginated list of WAF profiles. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(WAFProfileListResult, Fixnum, Hash)>] WAFProfileListResult data, response status code and response headers
    def list_waf_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.list_waf_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_waf_profiles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_waf_profiles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/waf-profiles'

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFProfileListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#list_waf_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a paginated list of WAF rules
    # Get a paginated list of WAF rules. 
    # @param waf_rule_set_id 
    # @param waf_category_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [WAFRuleListResult]
    def list_waf_rules(waf_rule_set_id, waf_category_id, opts = {})
      data, _status_code, _headers = list_waf_rules_with_http_info(waf_rule_set_id, waf_category_id, opts)
      data
    end

    # Get a paginated list of WAF rules
    # Get a paginated list of WAF rules. 
    # @param waf_rule_set_id 
    # @param waf_category_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(WAFRuleListResult, Fixnum, Hash)>] WAFRuleListResult data, response status code and response headers
    def list_waf_rules_with_http_info(waf_rule_set_id, waf_category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.list_waf_rules ...'
      end
      # verify the required parameter 'waf_rule_set_id' is set
      if @api_client.config.client_side_validation && waf_rule_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_rule_set_id' when calling PolicyWafApi.list_waf_rules"
      end
      # verify the required parameter 'waf_category_id' is set
      if @api_client.config.client_side_validation && waf_category_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_category_id' when calling PolicyWafApi.list_waf_rules"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_waf_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyWafApi.list_waf_rules, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/waf-rule-sets/{waf-rule-set-id}/categories/{waf-category-id}/rules'.sub('{' + 'waf-rule-set-id' + '}', waf_rule_set_id.to_s).sub('{' + 'waf-category-id' + '}', waf_category_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFRuleListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#list_waf_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a WAF global config
    # By default the enable_ers flag is false. It can be set true/false using this API 
    # @param waf_global_config 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_waf_global_config(waf_global_config, opts = {})
      patch_waf_global_config_with_http_info(waf_global_config, opts)
      nil
    end

    # Update a WAF global config
    # By default the enable_ers flag is false. It can be set true/false using this API 
    # @param waf_global_config 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_waf_global_config_with_http_info(waf_global_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.patch_waf_global_config ...'
      end
      # verify the required parameter 'waf_global_config' is set
      if @api_client.config.client_side_validation && waf_global_config.nil?
        fail ArgumentError, "Missing the required parameter 'waf_global_config' when calling PolicyWafApi.patch_waf_global_config"
      end
      # resource path
      local_var_path = '/infra/waf-global-config/default'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(waf_global_config)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#patch_waf_global_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a WAF profile
    # If a WAFProfile with the waf-profile-id is not already present, create a new WAFProfile. If it already exists, update the WAFProfile. This is a full replace. 
    # @param waf_profile_id 
    # @param waf_profile 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_waf_profile(waf_profile_id, waf_profile, opts = {})
      patch_waf_profile_with_http_info(waf_profile_id, waf_profile, opts)
      nil
    end

    # Create or update a WAF profile
    # If a WAFProfile with the waf-profile-id is not already present, create a new WAFProfile. If it already exists, update the WAFProfile. This is a full replace. 
    # @param waf_profile_id 
    # @param waf_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_waf_profile_with_http_info(waf_profile_id, waf_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.patch_waf_profile ...'
      end
      # verify the required parameter 'waf_profile_id' is set
      if @api_client.config.client_side_validation && waf_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_profile_id' when calling PolicyWafApi.patch_waf_profile"
      end
      # verify the required parameter 'waf_profile' is set
      if @api_client.config.client_side_validation && waf_profile.nil?
        fail ArgumentError, "Missing the required parameter 'waf_profile' when calling PolicyWafApi.patch_waf_profile"
      end
      # resource path
      local_var_path = '/infra/waf-profiles/{waf-profile-id}'.sub('{' + 'waf-profile-id' + '}', waf_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(waf_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#patch_waf_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download and update web application firewall ERS rules
    # Manually download and update web application firewall ERS categories and rules. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_waf_ers_rules_update_rules(opts = {})
      update_waf_ers_rules_update_rules_with_http_info(opts)
      nil
    end

    # Download and update web application firewall ERS rules
    # Manually download and update web application firewall ERS categories and rules. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_waf_ers_rules_update_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.update_waf_ers_rules_update_rules ...'
      end
      # resource path
      local_var_path = '/infra/waf-rule-sets/ers?action=update_rules'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#update_waf_ers_rules_update_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a WAF profile
    # If a WAFProfile with the waf-profile-id is not already present, create a new WAFProfile. If it already exists, update the WAFProfile. This is a full replace. 
    # @param waf_profile_id 
    # @param waf_profile 
    # @param [Hash] opts the optional parameters
    # @return [WAFProfile]
    def update_waf_profile(waf_profile_id, waf_profile, opts = {})
      data, _status_code, _headers = update_waf_profile_with_http_info(waf_profile_id, waf_profile, opts)
      data
    end

    # Create or update a WAF profile
    # If a WAFProfile with the waf-profile-id is not already present, create a new WAFProfile. If it already exists, update the WAFProfile. This is a full replace. 
    # @param waf_profile_id 
    # @param waf_profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WAFProfile, Fixnum, Hash)>] WAFProfile data, response status code and response headers
    def update_waf_profile_with_http_info(waf_profile_id, waf_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyWafApi.update_waf_profile ...'
      end
      # verify the required parameter 'waf_profile_id' is set
      if @api_client.config.client_side_validation && waf_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'waf_profile_id' when calling PolicyWafApi.update_waf_profile"
      end
      # verify the required parameter 'waf_profile' is set
      if @api_client.config.client_side_validation && waf_profile.nil?
        fail ArgumentError, "Missing the required parameter 'waf_profile' when calling PolicyWafApi.update_waf_profile"
      end
      # resource path
      local_var_path = '/infra/waf-profiles/{waf-profile-id}'.sub('{' + 'waf-profile-id' + '}', waf_profile_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(waf_profile)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WAFProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyWafApi#update_waf_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
