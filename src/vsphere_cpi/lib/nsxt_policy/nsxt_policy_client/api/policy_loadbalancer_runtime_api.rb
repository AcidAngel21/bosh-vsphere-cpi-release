=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module NSXTPolicyClient
  class PolicyLoadbalancerRuntimeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read load balancer usage for the given node
    # API is used to retrieve node usage for load balancer which contains basic information, LB entity usages and capacities for the given node. Currently only edge node is supported. The parameter ?node_path=<node-path> is required. For example, ?node_path= /infra/sites/default/enforcement-points/default/edge-clusters/ 85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes/ 86e077c0-449f-11e9-87c8-02004eb37029. 
    # @param node_path The node path for load balancer node usage
    # @param [Hash] opts the optional parameters
    # @return [LBNodeUsage]
    def get_lb_node_usage(node_path, opts = {})
      data, _status_code, _headers = get_lb_node_usage_with_http_info(node_path, opts)
      data
    end

    # Read load balancer usage for the given node
    # API is used to retrieve node usage for load balancer which contains basic information, LB entity usages and capacities for the given node. Currently only edge node is supported. The parameter ?node_path&#x3D;&lt;node-path&gt; is required. For example, ?node_path&#x3D; /infra/sites/default/enforcement-points/default/edge-clusters/ 85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes/ 86e077c0-449f-11e9-87c8-02004eb37029. 
    # @param node_path The node path for load balancer node usage
    # @param [Hash] opts the optional parameters
    # @return [Array<(LBNodeUsage, Fixnum, Hash)>] LBNodeUsage data, response status code and response headers
    def get_lb_node_usage_with_http_info(node_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_node_usage ...'
      end
      # verify the required parameter 'node_path' is set
      if @api_client.config.client_side_validation && node_path.nil?
        fail ArgumentError, "Missing the required parameter 'node_path' when calling PolicyLoadbalancerRuntimeApi.get_lb_node_usage"
      end
      # resource path
      local_var_path = '/infra/lb-node-usage'

      # query parameters
      query_params = {}
      query_params[:'node_path'] = node_path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LBNodeUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_node_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatistics]
    def get_lb_pool_statistics(lb_service_id, lb_pool_id, opts = {})
      data, _status_code, _headers = get_lb_pool_statistics_with_http_info(lb_service_id, lb_pool_id, opts)
      data
    end

    # Get LBPool statistics information
    # Get LBPoolStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatistics, Fixnum, Hash)>] AggregateLBPoolStatistics data, response status code and response headers
    def get_lb_pool_statistics_with_http_info(lb_service_id, lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_pool_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_pool_statistics"
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_pool_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_pool_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBPoolStatus]
    def get_lb_pool_status(lb_service_id, lb_pool_id, opts = {})
      data, _status_code, _headers = get_lb_pool_status_with_http_info(lb_service_id, lb_pool_id, opts)
      data
    end

    # Get LBPool status information
    # Get LBPool detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_pool_id LBPool id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBPoolStatus, Fixnum, Hash)>] AggregateLBPoolStatus data, response status code and response headers
    def get_lb_pool_status_with_http_info(lb_service_id, lb_pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_pool_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_pool_status"
      end
      # verify the required parameter 'lb_pool_id' is set
      if @api_client.config.client_side_validation && lb_pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_pool_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_pool_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-pool-id' + '}', lb_pool_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBPoolStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_pool_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService statistics information
    # Get LBServiceStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatistics]
    def get_lb_service_statistics(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_statistics_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService statistics information
    # Get LBServiceStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatistics, Fixnum, Hash)>] AggregateLBServiceStatistics data, response status code and response headers
    def get_lb_service_statistics_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_service_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_service_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_service_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService status information
    # Get LBService detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceStatus]
    def get_lb_service_status(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_status_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService status information
    # Get LBService detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceStatus, Fixnum, Hash)>] AggregateLBServiceStatus data, response status code and response headers
    def get_lb_service_status_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_service_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_service_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_service_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBService usage information
    # Get LBServiceUsage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBServiceUsage]
    def get_lb_service_usage(lb_service_id, opts = {})
      data, _status_code, _headers = get_lb_service_usage_with_http_info(lb_service_id, opts)
      data
    end

    # Get LBService usage information
    # Get LBServiceUsage information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBServiceUsage, Fixnum, Hash)>] AggregateLBServiceUsage data, response status code and response headers
    def get_lb_service_usage_with_http_info(lb_service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_service_usage ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_service_usage"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/service-usage'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBServiceUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_service_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatistics]
    def get_lb_virtual_server_statistics(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_lb_virtual_server_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer statistics information
    # Get LBVirtualServerStatistics information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatistics, Fixnum, Hash)>] AggregateLBVirtualServerStatistics data, response status code and response headers
    def get_lb_virtual_server_statistics_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_virtual_server_statistics ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_virtual_server_statistics"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_virtual_server_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/statistics'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_virtual_server_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [AggregateLBVirtualServerStatus]
    def get_lb_virtual_server_status(lb_service_id, lb_virtual_server_id, opts = {})
      data, _status_code, _headers = get_lb_virtual_server_status_with_http_info(lb_service_id, lb_virtual_server_id, opts)
      data
    end

    # Get LBVirtualServer status information
    # Get LBVirtualServer detailed status information. - no enforcement point path specified: Information will be aggregated from each enforcement point. - {enforcement_point_path}: Information will be retrieved only from the given enforcement point. 
    # @param lb_service_id LBService id
    # @param lb_virtual_server_id LBVirtualServer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enforcement_point_path String Path of the enforcement point
    # @option opts [String] :source Data source type.
    # @return [Array<(AggregateLBVirtualServerStatus, Fixnum, Hash)>] AggregateLBVirtualServerStatus data, response status code and response headers
    def get_lb_virtual_server_status_with_http_info(lb_service_id, lb_virtual_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyLoadbalancerRuntimeApi.get_lb_virtual_server_status ...'
      end
      # verify the required parameter 'lb_service_id' is set
      if @api_client.config.client_side_validation && lb_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_service_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_virtual_server_status"
      end
      # verify the required parameter 'lb_virtual_server_id' is set
      if @api_client.config.client_side_validation && lb_virtual_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'lb_virtual_server_id' when calling PolicyLoadbalancerRuntimeApi.get_lb_virtual_server_status"
      end
      if @api_client.config.client_side_validation && opts[:'source'] && !['realtime', 'cached'].include?(opts[:'source'])
        fail ArgumentError, 'invalid value for "source", must be one of realtime, cached'
      end
      # resource path
      local_var_path = '/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/detailed-status'.sub('{' + 'lb-service-id' + '}', lb_service_id.to_s).sub('{' + 'lb-virtual-server-id' + '}', lb_virtual_server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'enforcement_point_path'] = opts[:'enforcement_point_path'] if !opts[:'enforcement_point_path'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregateLBVirtualServerStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyLoadbalancerRuntimeApi#get_lb_virtual_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
