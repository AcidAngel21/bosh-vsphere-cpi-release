=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module NSXTPolicyClient
  class PolicyDraftApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Aborts publishing of a draft if there is a failure
    # If there is a failure during publish, the admin can choose to abort the publishing attempts. This will bring back the system to the current configuration, i.e just before the publish was invoked. If draft publishing is not in progress or already completed, then this is a NO-OP 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def abort_draft_abort(draft_id, opts = {})
      abort_draft_abort_with_http_info(draft_id, opts)
      nil
    end

    # Aborts publishing of a draft if there is a failure
    # If there is a failure during publish, the admin can choose to abort the publishing attempts. This will bring back the system to the current configuration, i.e just before the publish was invoked. If draft publishing is not in progress or already completed, then this is a NO-OP 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def abort_draft_abort_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.abort_draft_abort ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.abort_draft_abort"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}?action=abort'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#abort_draft_abort\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_draft(draft_id, opts = {})
      delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete a manual draft
    # Delete a manual draft.
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.delete_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarichal payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_aggregated_configuration_to_be_published_for_draft(draft_id, opts = {})
      data, _status_code, _headers = get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts)
      data
    end

    # Get an aggregated configuration for the draft
    # Get an aggregated configuration that will get applied onto current configuration during publish of this draft. The response is a hierarichal payload containing the aggregated configuration differences from the latest auto draft till the specified draft. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_aggregated_configuration_to_be_published_for_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.get_aggregated_configuration_to_be_published_for_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.get_aggregated_configuration_to_be_published_for_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/aggregated'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#get_aggregated_configuration_to_be_published_for_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarichal payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Infra]
    def get_preview_of_configuration_after_publish_of_draft(draft_id, opts = {})
      data, _status_code, _headers = get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts)
      data
    end

    # Get a preview of a configuration after publish of a draft
    # Get a preview of a configuration which will be present after publish of a specified draft. The response essentially is a hierarichal payload containing the configuration, which will be in active after a specified draft gets published onto current configuration. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Infra, Fixnum, Hash)>] Infra data, response status code and response headers
    def get_preview_of_configuration_after_publish_of_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.get_preview_of_configuration_after_publish_of_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.get_preview_of_configuration_after_publish_of_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}/complete'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Infra')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#get_preview_of_configuration_after_publish_of_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results (default to false)
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer) (default to 1000)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [PolicyDraftListResult]
    def list_drafts(opts = {})
      data, _status_code, _headers = list_drafts_with_http_info(opts)
      data
    end

    # List policy drafts
    # List policy drafts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_drafts Fetch list of draft based on is_auto_draft flag
    # @option opts [String] :cursor Opaque cursor to be used for getting next page of records (supplied by current result page)
    # @option opts [BOOLEAN] :include_mark_for_delete_objects Include objects that are marked for deletion in results
    # @option opts [String] :included_fields Comma separated list of fields that should be included in query result
    # @option opts [Integer] :page_size Maximum number of results to return in this page (server may return fewer)
    # @option opts [BOOLEAN] :sort_ascending 
    # @option opts [String] :sort_by Field by which records are sorted
    # @return [Array<(PolicyDraftListResult, Fixnum, Hash)>] PolicyDraftListResult data, response status code and response headers
    def list_drafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.list_drafts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDraftApi.list_drafts, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PolicyDraftApi.list_drafts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/infra/drafts'

      # query parameters
      query_params = {}
      query_params[:'auto_drafts'] = opts[:'auto_drafts'] if !opts[:'auto_drafts'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_mark_for_delete_objects'] = opts[:'include_mark_for_delete_objects'] if !opts[:'include_mark_for_delete_objects'].nil?
      query_params[:'included_fields'] = opts[:'included_fields'] if !opts[:'included_fields'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_ascending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraftListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#list_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_draft(draft_id, policy_draft, opts = {})
      patch_draft_with_http_info(draft_id, policy_draft, opts)
      nil
    end

    # Patch a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.patch_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.patch_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling PolicyDraftApi.patch_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#patch_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_draft_publish(draft_id, infra, opts = {})
      publish_draft_publish_with_http_info(draft_id, infra, opts)
      nil
    end

    # Publish a draft
    # Read a draft and publish it by applying changes onto current configuration. 
    # @param draft_id 
    # @param infra 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def publish_draft_publish_with_http_info(draft_id, infra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.publish_draft_publish ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.publish_draft_publish"
      end
      # verify the required parameter 'infra' is set
      if @api_client.config.client_side_validation && infra.nil?
        fail ArgumentError, "Missing the required parameter 'infra' when calling PolicyDraftApi.publish_draft_publish"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}?action=publish'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(infra)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#publish_draft_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def put_draft(draft_id, policy_draft, opts = {})
      data, _status_code, _headers = put_draft_with_http_info(draft_id, policy_draft, opts)
      data
    end

    # Create or update a manual draft
    # Create a new manual draft if the specified draft id does not correspond to an existing draft. Update the manual draft otherwise. Auto draft can not be updated. 
    # @param draft_id 
    # @param policy_draft 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def put_draft_with_http_info(draft_id, policy_draft, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.put_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.put_draft"
      end
      # verify the required parameter 'policy_draft' is set
      if @api_client.config.client_side_validation && policy_draft.nil?
        fail ArgumentError, "Missing the required parameter 'policy_draft' when calling PolicyDraftApi.put_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_draft)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#put_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [PolicyDraft]
    def read_draft(draft_id, opts = {})
      data, _status_code, _headers = read_draft_with_http_info(draft_id, opts)
      data
    end

    # Read draft
    # Read a draft for a given draft identifier. 
    # @param draft_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyDraft, Fixnum, Hash)>] PolicyDraft data, response status code and response headers
    def read_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDraftApi.read_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling PolicyDraftApi.read_draft"
      end
      # resource path
      local_var_path = '/infra/drafts/{draft-id}'.sub('{' + 'draft-id' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDraftApi#read_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
