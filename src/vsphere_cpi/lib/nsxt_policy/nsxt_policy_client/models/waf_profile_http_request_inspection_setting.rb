=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module NSXTPolicyClient
  # Security Admin can configure the size of request body to be inspected by WAF with separate limits for file uploads and other regular requests. If the request is larger than the configured size, it can either be rejected or a decision to allow or reject can be made based on the partial request body that was inspected. 
  class WAFProfileHttpRequestInspectionSetting
    # There are multiple categories in the category group, by default, the categories would be enabled or disabled by default according to the WAFCategory configuration. Security Admin can add customized category settings in profile to override the default settings. 
    attr_accessor :category_settings

    # Flag to indicate whether the category group is enabled
    attr_accessor :enabled

    # Type of WAF category group settings in profile
    attr_accessor :type

    # Flag to indicate whether request body could be inspected
    attr_accessor :request_body_inspection

    # If the request is larger than the configured size, the request would be rejected or processed partially. 
    attr_accessor :request_body_limit

    # REJECT means WAF will reject a request body that is longer than specified. PROCESS_PARTIAL meansonly the first part of the request, the part that can fit into the desired limit, will be processed. 
    attr_accessor :request_body_limit_action

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'category_settings' => :'category_settings',
        :'enabled' => :'enabled',
        :'type' => :'type',
        :'request_body_inspection' => :'request_body_inspection',
        :'request_body_limit' => :'request_body_limit',
        :'request_body_limit_action' => :'request_body_limit_action'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'category_settings' => :'Array<WAFProfileCategorySetting>',
        :'enabled' => :'BOOLEAN',
        :'type' => :'String',
        :'request_body_inspection' => :'BOOLEAN',
        :'request_body_limit' => :'Integer',
        :'request_body_limit_action' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'category_settings')
        if (value = attributes[:'category_settings']).is_a?(Array)
          self.category_settings = value
        end
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = true
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'request_body_inspection')
        self.request_body_inspection = attributes[:'request_body_inspection']
      else
        self.request_body_inspection = true
      end

      if attributes.has_key?(:'request_body_limit')
        self.request_body_limit = attributes[:'request_body_limit']
      end

      if attributes.has_key?(:'request_body_limit_action')
        self.request_body_limit_action = attributes[:'request_body_limit_action']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if !@request_body_limit.nil? && @request_body_limit > 2147483647
        invalid_properties.push('invalid value for "request_body_limit", must be smaller than or equal to 2147483647.')
      end

      if !@request_body_limit.nil? && @request_body_limit < 0
        invalid_properties.push('invalid value for "request_body_limit", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['WAFProfileHttpRequestInspectionSetting', 'WAFProfileHttpResponseInspectionSetting', 'WAFProfileClientValidationSetting', 'WAFProfileApplicationSetting'])
      return false unless type_validator.valid?(@type)
      return false if !@request_body_limit.nil? && @request_body_limit > 2147483647
      return false if !@request_body_limit.nil? && @request_body_limit < 0
      request_body_limit_action_validator = EnumAttributeValidator.new('String', ['REJECT', 'PROCESS_PARTIAL'])
      return false unless request_body_limit_action_validator.valid?(@request_body_limit_action)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['WAFProfileHttpRequestInspectionSetting', 'WAFProfileHttpResponseInspectionSetting', 'WAFProfileClientValidationSetting', 'WAFProfileApplicationSetting'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] request_body_limit Value to be assigned
    def request_body_limit=(request_body_limit)
      if !request_body_limit.nil? && request_body_limit > 2147483647
        fail ArgumentError, 'invalid value for "request_body_limit", must be smaller than or equal to 2147483647.'
      end

      if !request_body_limit.nil? && request_body_limit < 0
        fail ArgumentError, 'invalid value for "request_body_limit", must be greater than or equal to 0.'
      end

      @request_body_limit = request_body_limit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_body_limit_action Object to be assigned
    def request_body_limit_action=(request_body_limit_action)
      validator = EnumAttributeValidator.new('String', ['REJECT', 'PROCESS_PARTIAL'])
      unless validator.valid?(request_body_limit_action)
        fail ArgumentError, 'invalid value for "request_body_limit_action", must be one of #{validator.allowable_values}.'
      end
      @request_body_limit_action = request_body_limit_action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          category_settings == o.category_settings &&
          enabled == o.enabled &&
          type == o.type &&
          request_body_inspection == o.request_body_inspection &&
          request_body_limit == o.request_body_limit &&
          request_body_limit_action == o.request_body_limit_action
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [category_settings, enabled, type, request_body_inspection, request_body_limit, request_body_limit_action].hash
    end

# Builds the object from hash
# @param [Hash] attributes Model attributes in the form of hash
# @return [Object] Returns the model itself
def build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  self.class.swagger_types.each_pair do |key, type|
    if type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the the attribute
      # is documented as an array but the input is not
      if attributes[self.class.attribute_map[key]].is_a?(Array)
        self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
      end
    elsif !attributes[self.class.attribute_map[key]].nil?
      self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
    end # or else data not found in attributes(hash), not an issue as the data can be optional
  end

  self
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def _deserialize(type, value)
  case type.to_sym
  when :DateTime
    DateTime.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :BOOLEAN
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    # If value has resource_type - use it to deserialize
    unless value[:resource_type].nil?
      type = value[:resource_type].to_sym
    end
    temp_model = NSXTPolicyClient.const_get(type).new
    temp_model.build_from_hash(value)
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {}
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    next if value.nil?
    hash[param] = _to_hash(value)
  end
  hash
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

  end
end
