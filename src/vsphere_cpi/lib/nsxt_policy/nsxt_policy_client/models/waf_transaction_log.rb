=begin
#NSX-T Data Center Policy API

#VMware NSX-T Data Center Policy REST API

OpenAPI spec version: 2.5.0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module NSXTPolicyClient
  # For every HTTP request hit WAF rules, WAF will provide detailed logs about the transaction. Audit log for each transaction, it includes the basic audit log header information such  transaction id, timestamp, client IP and port, request URL. It also indicates whether the HTTP request is denied or accepted. When the transaction matched the WAF rules, the WAF rule category name list is returned together with anomaly score. When listing transaction logs, attack and log details are returned if include_details=true is provided in the query parameters. 
  class WAFTransactionLog
    # Indicates whether the HTTP request is denied, allowed or detected
    attr_accessor :action

    # Total anomaly score of this HTTP request
    attr_accessor :anomaly_score

    # Category names for the WAF rules which the HTTP request hit
    attr_accessor :attack_category_names

    # The attack details in transaction log
    attr_accessor :attack_details

    # Client IP address of the HTTP request which hit WAF rules
    attr_accessor :client_ip

    # Client port of the HTTP request which hit WAF rules
    attr_accessor :client_port

    # Log Details for the transaction
    attr_accessor :log_details

    # The timestamp of the transaction
    attr_accessor :timestamp

    # The unique ID for the transaction log
    attr_accessor :transaction_id

    # HTTP request URL which hit WAF rules
    attr_accessor :url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'anomaly_score' => :'anomaly_score',
        :'attack_category_names' => :'attack_category_names',
        :'attack_details' => :'attack_details',
        :'client_ip' => :'client_ip',
        :'client_port' => :'client_port',
        :'log_details' => :'log_details',
        :'timestamp' => :'timestamp',
        :'transaction_id' => :'transaction_id',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'action' => :'String',
        :'anomaly_score' => :'Integer',
        :'attack_category_names' => :'Array<String>',
        :'attack_details' => :'Array<WAFAttackDetail>',
        :'client_ip' => :'String',
        :'client_port' => :'Integer',
        :'log_details' => :'Array<WAFLogDetail>',
        :'timestamp' => :'Integer',
        :'transaction_id' => :'String',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.has_key?(:'anomaly_score')
        self.anomaly_score = attributes[:'anomaly_score']
      end

      if attributes.has_key?(:'attack_category_names')
        if (value = attributes[:'attack_category_names']).is_a?(Array)
          self.attack_category_names = value
        end
      end

      if attributes.has_key?(:'attack_details')
        if (value = attributes[:'attack_details']).is_a?(Array)
          self.attack_details = value
        end
      end

      if attributes.has_key?(:'client_ip')
        self.client_ip = attributes[:'client_ip']
      end

      if attributes.has_key?(:'client_port')
        self.client_port = attributes[:'client_port']
      end

      if attributes.has_key?(:'log_details')
        if (value = attributes[:'log_details']).is_a?(Array)
          self.log_details = value
        end
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      action_validator = EnumAttributeValidator.new('String', ['DENIED', 'ALLOWED', 'DETECTED'])
      return false unless action_validator.valid?(@action)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ['DENIED', 'ALLOWED', 'DETECTED'])
      unless validator.valid?(action)
        fail ArgumentError, 'invalid value for "action", must be one of #{validator.allowable_values}.'
      end
      @action = action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          anomaly_score == o.anomaly_score &&
          attack_category_names == o.attack_category_names &&
          attack_details == o.attack_details &&
          client_ip == o.client_ip &&
          client_port == o.client_port &&
          log_details == o.log_details &&
          timestamp == o.timestamp &&
          transaction_id == o.transaction_id &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [action, anomaly_score, attack_category_names, attack_details, client_ip, client_port, log_details, timestamp, transaction_id, url].hash
    end

# Builds the object from hash
# @param [Hash] attributes Model attributes in the form of hash
# @return [Object] Returns the model itself
def build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  self.class.swagger_types.each_pair do |key, type|
    if type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the the attribute
      # is documented as an array but the input is not
      if attributes[self.class.attribute_map[key]].is_a?(Array)
        self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
      end
    elsif !attributes[self.class.attribute_map[key]].nil?
      self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
    end # or else data not found in attributes(hash), not an issue as the data can be optional
  end

  self
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def _deserialize(type, value)
  case type.to_sym
  when :DateTime
    DateTime.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :BOOLEAN
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    # If value has resource_type - use it to deserialize
    unless value[:resource_type].nil?
      type = value[:resource_type].to_sym
    end
    temp_model = NSXTPolicyClient.const_get(type).new
    temp_model.build_from_hash(value)
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {}
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    next if value.nil?
    hash[param] = _to_hash(value)
  end
  hash
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

  end
end
